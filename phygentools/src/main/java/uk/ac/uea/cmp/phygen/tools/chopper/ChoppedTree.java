/*
 * Phylogenetics Tool suite
 * Copyright (C) 2013  UEA CMP Phylogenetics Group
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with this program.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

package uk.ac.uea.cmp.phygen.tools.chopper;

import uk.ac.uea.cmp.phygen.core.ds.quartet.QuartetWeights;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.NumberFormat;
import java.util.LinkedList;

/**
 * Created with IntelliJ IDEA. User: Dan Date: 29/07/13 Time: 22:51 To change this template use File | Settings | File
 * Templates.
 */
public class ChoppedTree {

    private LinkedList<String> taxonNames;
    private QuartetWeights quartetWeights;
    private QuartetWeights summer;

    public ChoppedTree() {
        this(new LinkedList<String>(), new QuartetWeights(), new QuartetWeights());
    }

    public ChoppedTree(LinkedList<String> taxonNames, QuartetWeights quartetWeights, QuartetWeights summer) {
        this.taxonNames = taxonNames;
        this.quartetWeights = quartetWeights;
        this.summer = summer;
    }

    public LinkedList<String> getTaxonNames() {
        return taxonNames;
    }

    public QuartetWeights getQuartetWeights() {
        return quartetWeights;
    }

    public QuartetWeights getSummer() {
        return summer;
    }

    public void divide() {
        quartetWeights.divide(summer);
    }

    public void save(File outputPrefix) throws IOException {
        this.saveInformation(outputPrefix);
        this.saveQuartets(outputPrefix);
    }

    public void saveQuartets(File outputFile) throws IOException {

        int N = taxonNames.size();

        FileWriter out = new FileWriter(outputFile);

        out.write("taxanumber: " + N + ";\ndescription: supernetwork quartets generated by uk.ac.uea.cmp.phygen.superq.chopper;\nsense: max;\n");

        NumberFormat nF = NumberFormat.getIntegerInstance();
        nF.setMinimumIntegerDigits(3);
        nF.setMaximumIntegerDigits(3);

        for (int n = 0; n < N; n++) {

            out.write("taxon:   " + nF.format(n + 1) + "   name: " + ((String) taxonNames.get(n)) + ";\n");

        }

        for (int iA = 0; iA < N - 3; iA++) {

            for (int iB = iA + 1; iB < N - 2; iB++) {

                for (int iC = iB + 1; iC < N - 1; iC++) {

                    for (int iD = iC + 1; iD < N; iD++) {

                        int a = iA + 1;
                        int b = iB + 1;
                        int c = iC + 1;
                        int d = iD + 1;

                        out.write("quartet: " + nF.format(a) + " " + nF.format(b) + " " + nF.format(c) + " " + nF.format(d)
                                + " weights: "
                                + quartetWeights.getWeight(a, b, c, d) + " " + quartetWeights.getWeight(a, c, b, d)
                                + " " + quartetWeights.getWeight(a, d, b, c) + ";\n");

                    }
                }
            }
        }

        out.close();

    }

    public void saveInformation(File outputFile) throws IOException {

        int N = taxonNames.size();

        FileWriter out = new FileWriter(outputFile + ".info");

        out.write("taxanumber: " + N + ";\ndescription: supernetwork quartets presences generated by uk.ac.uea.cmp.phygen.superq.chopper;\nsense: max;\n");

        NumberFormat nF = NumberFormat.getIntegerInstance();
        nF.setMinimumIntegerDigits(3);
        nF.setMaximumIntegerDigits(3);

        for (int n = 0; n < N; n++) {

            out.write("taxon:   " + nF.format(n + 1) + "   name: " + ((String) taxonNames.get(n)) + ";\n");

        }

        for (int iA = 0; iA < N - 3; iA++) {

            for (int iB = iA + 1; iB < N - 2; iB++) {

                for (int iC = iB + 1; iC < N - 1; iC++) {

                    for (int iD = iC + 1; iD < N; iD++) {

                        int a = iA + 1;
                        int b = iB + 1;
                        int c = iC + 1;
                        int d = iD + 1;

                        if (summer.getWeight(a, b, c, d) > 0.0) {

                            out.write("quartet: " + nF.format(a) + " " + nF.format(b) + " " + nF.format(c) + " " + nF.format(d)
                                    + " weights: "
                                    + "1 1 1;\n");

                        } else {

                            out.write("quartet: " + nF.format(a) + " " + nF.format(b) + " " + nF.format(c) + " " + nF.format(d)
                                    + " weights: "
                                    + "0 0 0;\n");

                        }
                    }
                }
            }
        }

        out.close();
    }

}
